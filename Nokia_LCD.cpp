#include "Nokia_LCD.h"
#include <avr/pgmspace.h>

namespace {
const uint8_t kDisplay_max_width = 84;
const uint8_t kDisplay_max_height = 48;
const unsigned int kTotal_bits = kDisplay_max_width * kDisplay_max_height / 8;

/* Font table:
This table contains the hex values that represent pixels for a
font that is 5 pixels wide and 8 pixels high. Each byte in a row
represents one, 8-pixel, vertical column of a character. 5 bytes
per character. */
const unsigned char ASCII[][5] = {
    // First 32 characters (0x00-0x19) are ignored. These are
    // non-displayable, control characters.
    {0x00, 0x00, 0x00, 0x00, 0x00}  // 0x20
    ,
    {0x00, 0x00, 0x5f, 0x00, 0x00}  // 0x21 !
    ,
    {0x00, 0x07, 0x00, 0x07, 0x00}  // 0x22 "
    ,
    {0x14, 0x7f, 0x14, 0x7f, 0x14}  // 0x23 #
    ,
    {0x24, 0x2a, 0x7f, 0x2a, 0x12}  // 0x24 $
    ,
    {0x23, 0x13, 0x08, 0x64, 0x62}  // 0x25 %
    ,
    {0x36, 0x49, 0x55, 0x22, 0x50}  // 0x26 &
    ,
    {0x00, 0x05, 0x03, 0x00, 0x00}  // 0x27 '
    ,
    {0x00, 0x1c, 0x22, 0x41, 0x00}  // 0x28 (
    ,
    {0x00, 0x41, 0x22, 0x1c, 0x00}  // 0x29 )
    ,
    {0x14, 0x08, 0x3e, 0x08, 0x14}  // 0x2a *
    ,
    {0x08, 0x08, 0x3e, 0x08, 0x08}  // 0x2b +
    ,
    {0x00, 0x50, 0x30, 0x00, 0x00}  // 0x2c ,
    ,
    {0x08, 0x08, 0x08, 0x08, 0x08}  // 0x2d -
    ,
    {0x00, 0x60, 0x60, 0x00, 0x00}  // 0x2e .
    ,
    {0x20, 0x10, 0x08, 0x04, 0x02}  // 0x2f /
    ,
    {0x3e, 0x51, 0x49, 0x45, 0x3e}  // 0x30 0
    ,
    {0x00, 0x42, 0x7f, 0x40, 0x00}  // 0x31 1
    ,
    {0x42, 0x61, 0x51, 0x49, 0x46}  // 0x32 2
    ,
    {0x21, 0x41, 0x45, 0x4b, 0x31}  // 0x33 3
    ,
    {0x18, 0x14, 0x12, 0x7f, 0x10}  // 0x34 4
    ,
    {0x27, 0x45, 0x45, 0x45, 0x39}  // 0x35 5
    ,
    {0x3c, 0x4a, 0x49, 0x49, 0x30}  // 0x36 6
    ,
    {0x01, 0x71, 0x09, 0x05, 0x03}  // 0x37 7
    ,
    {0x36, 0x49, 0x49, 0x49, 0x36}  // 0x38 8
    ,
    {0x06, 0x49, 0x49, 0x29, 0x1e}  // 0x39 9
    ,
    {0x00, 0x36, 0x36, 0x00, 0x00}  // 0x3a :
    ,
    {0x00, 0x56, 0x36, 0x00, 0x00}  // 0x3b ;
    ,
    {0x08, 0x14, 0x22, 0x41, 0x00}  // 0x3c <
    ,
    {0x14, 0x14, 0x14, 0x14, 0x14}  // 0x3d =
    ,
    {0x00, 0x41, 0x22, 0x14, 0x08}  // 0x3e >
    ,
    {0x02, 0x01, 0x51, 0x09, 0x06}  // 0x3f ?
    ,
    {0x32, 0x49, 0x79, 0x41, 0x3e}  // 0x40 @
    ,
    {0x7e, 0x11, 0x11, 0x11, 0x7e}  // 0x41 A
    ,
    {0x7f, 0x49, 0x49, 0x49, 0x36}  // 0x42 B
    ,
    {0x3e, 0x41, 0x41, 0x41, 0x22}  // 0x43 C
    ,
    {0x7f, 0x41, 0x41, 0x22, 0x1c}  // 0x44 D
    ,
    {0x7f, 0x49, 0x49, 0x49, 0x41}  // 0x45 E
    ,
    {0x7f, 0x09, 0x09, 0x09, 0x01}  // 0x46 F
    ,
    {0x3e, 0x41, 0x49, 0x49, 0x7a}  // 0x47 G
    ,
    {0x7f, 0x08, 0x08, 0x08, 0x7f}  // 0x48 H
    ,
    {0x00, 0x41, 0x7f, 0x41, 0x00}  // 0x49 I
    ,
    {0x20, 0x40, 0x41, 0x3f, 0x01}  // 0x4a J
    ,
    {0x7f, 0x08, 0x14, 0x22, 0x41}  // 0x4b K
    ,
    {0x7f, 0x40, 0x40, 0x40, 0x40}  // 0x4c L
    ,
    {0x7f, 0x02, 0x0c, 0x02, 0x7f}  // 0x4d M
    ,
    {0x7f, 0x04, 0x08, 0x10, 0x7f}  // 0x4e N
    ,
    {0x3e, 0x41, 0x41, 0x41, 0x3e}  // 0x4f O
    ,
    {0x7f, 0x09, 0x09, 0x09, 0x06}  // 0x50 P
    ,
    {0x3e, 0x41, 0x51, 0x21, 0x5e}  // 0x51 Q
    ,
    {0x7f, 0x09, 0x19, 0x29, 0x46}  // 0x52 R
    ,
    {0x46, 0x49, 0x49, 0x49, 0x31}  // 0x53 S
    ,
    {0x01, 0x01, 0x7f, 0x01, 0x01}  // 0x54 T
    ,
    {0x3f, 0x40, 0x40, 0x40, 0x3f}  // 0x55 U
    ,
    {0x1f, 0x20, 0x40, 0x20, 0x1f}  // 0x56 V
    ,
    {0x3f, 0x40, 0x38, 0x40, 0x3f}  // 0x57 W
    ,
    {0x63, 0x14, 0x08, 0x14, 0x63}  // 0x58 X
    ,
    {0x07, 0x08, 0x70, 0x08, 0x07}  // 0x59 Y
    ,
    {0x61, 0x51, 0x49, 0x45, 0x43}  // 0x5a Z
    ,
    {0x00, 0x7f, 0x41, 0x41, 0x00}  // 0x5b [
    ,
    {0x02, 0x04, 0x08, 0x10,
     0x20}  // 0x5c \ (keep this to escape the backslash)
    ,
    {0x00, 0x41, 0x41, 0x7f, 0x00}  // 0x5d ]
    ,
    {0x04, 0x02, 0x01, 0x02, 0x04}  // 0x5e ^
    ,
    {0x40, 0x40, 0x40, 0x40, 0x40}  // 0x5f _
    ,
    {0x00, 0x01, 0x02, 0x04, 0x00}  // 0x60 `
    ,
    {0x20, 0x54, 0x54, 0x54, 0x78}  // 0x61 a
    ,
    {0x7f, 0x48, 0x44, 0x44, 0x38}  // 0x62 b
    ,
    {0x38, 0x44, 0x44, 0x44, 0x20}  // 0x63 c
    ,
    {0x38, 0x44, 0x44, 0x48, 0x7f}  // 0x64 d
    ,
    {0x38, 0x54, 0x54, 0x54, 0x18}  // 0x65 e
    ,
    {0x08, 0x7e, 0x09, 0x01, 0x02}  // 0x66 f
    ,
    {0x0c, 0x52, 0x52, 0x52, 0x3e}  // 0x67 g
    ,
    {0x7f, 0x08, 0x04, 0x04, 0x78}  // 0x68 h
    ,
    {0x00, 0x44, 0x7d, 0x40, 0x00}  // 0x69 i
    ,
    {0x20, 0x40, 0x44, 0x3d, 0x00}  // 0x6a j
    ,
    {0x7f, 0x10, 0x28, 0x44, 0x00}  // 0x6b k
    ,
    {0x00, 0x41, 0x7f, 0x40, 0x00}  // 0x6c l
    ,
    {0x7c, 0x04, 0x18, 0x04, 0x78}  // 0x6d m
    ,
    {0x7c, 0x08, 0x04, 0x04, 0x78}  // 0x6e n
    ,
    {0x38, 0x44, 0x44, 0x44, 0x38}  // 0x6f o
    ,
    {0x7c, 0x14, 0x14, 0x14, 0x08}  // 0x70 p
    ,
    {0x08, 0x14, 0x14, 0x18, 0x7c}  // 0x71 q
    ,
    {0x7c, 0x08, 0x04, 0x04, 0x08}  // 0x72 r
    ,
    {0x48, 0x54, 0x54, 0x54, 0x20}  // 0x73 s
    ,
    {0x04, 0x3f, 0x44, 0x40, 0x20}  // 0x74 t
    ,
    {0x3c, 0x40, 0x40, 0x20, 0x7c}  // 0x75 u
    ,
    {0x1c, 0x20, 0x40, 0x20, 0x1c}  // 0x76 v
    ,
    {0x3c, 0x40, 0x30, 0x40, 0x3c}  // 0x77 w
    ,
    {0x44, 0x28, 0x10, 0x28, 0x44}  // 0x78 x
    ,
    {0x0c, 0x50, 0x50, 0x50, 0x3c}  // 0x79 y
    ,
    {0x44, 0x64, 0x54, 0x4c, 0x44}  // 0x7a z
    ,
    {0x00, 0x08, 0x36, 0x41, 0x00}  // 0x7b {
    ,
    {0x00, 0x00, 0x7f, 0x00, 0x00}  // 0x7c |
    ,
    {0x00, 0x41, 0x36, 0x08, 0x00}  // 0x7d }
    ,
    {0x10, 0x08, 0x08, 0x10, 0x08}  // 0x7e ~
    ,
    {0x78, 0x46, 0x41, 0x46, 0x78}  // 0x7f DEL
};
}  // namespace

Nokia_LCD::Nokia_LCD(uint8_t clk_pin, uint8_t din_pin, uint8_t dc_pin,
                     uint8_t ce_pin, uint8_t rst_pin)
    : kClk_pin{clk_pin},
      kDin_pin{din_pin},
      kDc_pin{dc_pin},
      kCe_pin{ce_pin},
      kRst_pin{rst_pin},
      mXcursor{0},
      mYcursor{0} {}

void Nokia_LCD::begin() {
    pinMode(kClk_pin, OUTPUT);
    pinMode(kDin_pin, OUTPUT);
    pinMode(kDc_pin, OUTPUT);
    pinMode(kCe_pin, OUTPUT);
    pinMode(kRst_pin, OUTPUT);

    // Reset the LCD to a known state
    digitalWrite(kRst_pin, LOW);
    digitalWrite(kRst_pin, HIGH);

    sendCommand(0x21);  // Tell LCD extended commands follow
    sendCommand(0xB0);  // Set LCD Vop (Contrast)
    sendCommand(0x04);  // Set Temp coefficent
    sendCommand(0x14);  // LCD bias mode 1:48 (try 0x13)
    // We must send 0x20 before modifying the display control mode
    sendCommand(0x20);
    sendCommand(0x0C);  // Set display control, normal mode.
}

void Nokia_LCD::setContrast(uint8_t contrast) {
    sendCommand(0x21);             // Tell LCD that extended commands follow
    sendCommand(0x80 | contrast);  // Set LCD Vop (Contrast)
    sendCommand(0x20);             // Set display mode
}

bool Nokia_LCD::setCursor(uint8_t x, uint8_t y) {
    if (x >= kDisplay_max_width || y >= kDisplay_max_height) {
        return false;
    }

    mXcursor = x;
    mYcursor = y;
    sendCommand(0x80 | mXcursor);  // Column
    sendCommand(0x40 | mYcursor);  // Row

    return true;
}

uint8_t Nokia_LCD::getX() { return mXcursor; }

uint8_t Nokia_LCD::getY() { return mYcursor; }

void Nokia_LCD::clear(bool is_black) {
    setCursor(0, 0);
    unsigned char color = is_black ? 255 : 0;

    for (unsigned int i = 0; i < kTotal_bits; i++) {
        sendData(color);
    }
    setCursor(0, 0);
}

bool Nokia_LCD::print(const char *string) {}

bool Nokia_LCD::print(String string) {}

bool Nokia_LCD::draw(const unsigned char bitmap[],
                     const unsigned int bitmap_size,
                     const bool read_from_progmem) {
    for (unsigned int i = 0; i < bitmap_size && i < kTotal_bits; i++) {
        unsigned char pixel =
            read_from_progmem ? pgm_read_byte_near(bitmap + i) : bitmap[i];
        sendData(pixel);
    }
    return bitmap_size >= kTotal_bits;
}

void Nokia_LCD::sendCommand(const unsigned char command) {
    send(command, false);
}

void Nokia_LCD::sendData(const unsigned char data) { send(data, true); }

void Nokia_LCD::send(const unsigned char lcd_byte, const bool is_data) {
    // Tell the LCD that we are writing either to data or a command
    digitalWrite(kDc_pin, is_data);

    // Send the byte
    digitalWrite(kCe_pin, LOW);
    shiftOut(kDin_pin, kClk_pin, MSBFIRST, lcd_byte);
    digitalWrite(kCe_pin, HIGH);
}
